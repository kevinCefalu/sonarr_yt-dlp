"""Data models for the application."""
from dataclasses import dataclass, field
from datetime import datetime
from typing import Dict, List, Optional, Any


@dataclass
class Episode:
    """Represents a TV episode."""
    id: int
    title: str
    season_number: int
    episode_number: int
    series_id: int
    air_date_utc: Optional[datetime] = None
    monitored: bool = True
    has_file: bool = False

    @classmethod
    def from_sonarr_data(cls, data: Dict[str, Any]) -> 'Episode':
        """Create Episode from Sonarr API data."""
        air_date = None
        if data.get('airDateUtc'):
            try:
                air_date = datetime.strptime(data['airDateUtc'], "%Y-%m-%dT%H:%M:%SZ")
            except ValueError:
                pass

        return cls(
            id=data['id'],
            title=data['title'],
            season_number=data['seasonNumber'],
            episode_number=data['episodeNumber'],
            series_id=data['seriesId'],
            air_date_utc=air_date,
            monitored=data.get('monitored', True),
            has_file=data.get('hasFile', False)
        )


@dataclass
class Series:
    """Represents a TV series."""
    id: int
    title: str
    path: str
    monitored: bool = True

    # Configuration from config.yml
    url: Optional[str] = None
    format: Optional[str] = None
    cookies_file: Optional[str] = None
    playlist_reverse: bool = True

    # Subtitle settings
    subtitles_enabled: bool = False
    subtitles_languages: List[str] = field(default_factory=lambda: ['en'])
    subtitles_autogenerated: bool = False

    # Regex patterns
    sonarr_regex_match: Optional[str] = None
    sonarr_regex_replace: Optional[str] = None
    site_regex_match: Optional[str] = None
    site_regex_replace: Optional[str] = None

    # Time offset
    offset: Optional[Dict[str, int]] = None

    @classmethod
    def from_sonarr_data(cls, data: Dict[str, Any]) -> 'Series':
        """Create Series from Sonarr API data."""
        return cls(
            id=data['id'],
            title=data['title'],
            path=data['path'],
            monitored=data.get('monitored', True)
        )

    def apply_config(self, config: Dict[str, Any]) -> None:
        """Apply configuration from config.yml."""
        self.url = config.get('url')
        self.format = config.get('format')
        self.cookies_file = config.get('cookies_file')

        # Playlist settings
        if 'playlistreverse' in config:
            self.playlist_reverse = config['playlistreverse'] != 'False'

        # Subtitle settings
        if 'subtitles' in config:
            self.subtitles_enabled = True
            subtitles_config = config['subtitles']
            if 'languages' in subtitles_config:
                self.subtitles_languages = subtitles_config['languages']
            if 'autogenerated' in subtitles_config:
                self.subtitles_autogenerated = subtitles_config['autogenerated']

        # Regex patterns
        if 'regex' in config:
            regex_config = config['regex']
            if 'sonarr' in regex_config:
                self.sonarr_regex_match = regex_config['sonarr'].get('match')
                self.sonarr_regex_replace = regex_config['sonarr'].get('replace')
            if 'site' in regex_config:
                self.site_regex_match = regex_config['site'].get('match')
                self.site_regex_replace = regex_config['site'].get('replace')

        # Time offset
        if 'offset' in config:
            self.offset = config['offset']


@dataclass
class DownloadResult:
    """Represents the result of a download operation."""
    success: bool
    episode: Episode
    series: Series
    video_url: Optional[str] = None
    error_message: Optional[str] = None
