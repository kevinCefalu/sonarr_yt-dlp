"""
Example test file demonstrating the testing structure for the new modular codebase.

This file shows how to test individual components in isolation.
"""
import sys
import os
from pathlib import Path

# Add the app/src directory to Python path
project_root = Path(__file__).parent.parent
app_src_dir = project_root / 'app' / 'src'
sys.path.insert(0, str(app_src_dir))

import pytest
from unittest.mock import Mock, patch
from datetime import datetime

# Import the new modules
from models import Series, Episode
from services.sonarr_client import SonarrClient
from services.ytdlp_service import YTDLPService
from utils.text_utils import escape_title_for_search
from utils.date_utils import apply_time_offset


class TestModels:
    """Test data models."""

    def test_episode_from_sonarr_data(self):
        """Test Episode creation from Sonarr API data."""
        sonarr_data = {
            'id': 123,
            'title': 'Test Episode',
            'seasonNumber': 1,
            'episodeNumber': 5,
            'seriesId': 456,
            'airDateUtc': '2023-01-15T20:00:00Z',
            'monitored': True,
            'hasFile': False
        }

        episode = Episode.from_sonarr_data(sonarr_data)

        assert episode.id == 123
        assert episode.title == 'Test Episode'
        assert episode.season_number == 1
        assert episode.episode_number == 5
        assert episode.series_id == 456
        assert episode.monitored is True
        assert episode.has_file is False
        assert episode.air_date_utc == datetime(2023, 1, 15, 20, 0, 0)

    def test_series_apply_config(self):
        """Test Series configuration application."""
        series = Series(id=1, title='Test Series', path='/test')

        config = {
            'url': 'https://example.com',
            'format': 'best',
            'cookies_file': 'cookies.txt',
            'subtitles': {
                'languages': ['en', 'es'],
                'autogenerated': True
            },
            'regex': {
                'sonarr': {
                    'match': r'\.-.#[0-9]*$',
                    'replace': ''
                }
            }
        }

        series.apply_config(config)

        assert series.url == 'https://example.com'
        assert series.format == 'best'
        assert series.cookies_file == 'cookies.txt'
        assert series.subtitles_enabled is True
        assert series.subtitles_languages == ['en', 'es']
        assert series.subtitles_autogenerated is True
        assert series.sonarr_regex_match == r'\.-.#[0-9]*$'
        assert series.sonarr_regex_replace == ''


class TestSonarrClient:
    """Test Sonarr API client."""

    @patch('services.sonarr_client.requests.request')
    def test_get_series_success(self, mock_request):
        """Test successful series retrieval."""
        # Mock response
        mock_response = Mock()
        mock_response.json.return_value = [
            {
                'id': 1,
                'title': 'Test Series',
                'path': '/test',
                'monitored': True
            }
        ]
        mock_response.raise_for_status.return_value = None
        mock_request.return_value = mock_response

        client = SonarrClient('localhost', 8989, 'test_key')
        series_list = client.get_series()

        assert len(series_list) == 1
        assert series_list[0].title == 'Test Series'
        assert series_list[0].id == 1

    @patch('services.sonarr_client.requests.request')
    def test_api_error_handling(self, mock_request):
        """Test API error handling."""
        import requests
        from services.sonarr_client import SonarrAPIError

        # Use a requests exception that will be caught and re-raised as SonarrAPIError
        mock_request.side_effect = requests.exceptions.ConnectionError("Connection failed")

        client = SonarrClient('localhost', 8989, 'test_key')

        with pytest.raises(SonarrAPIError):
            client.get_series()


class TestYTDLPService:
    """Test YT-DLP service."""

    def test_get_search_options(self):
        """Test search options generation."""
        from pathlib import Path

        service = YTDLPService('best', Path('/config'), debug=False)
        options = service._get_search_options('Test Episode')

        assert 'ignoreerrors' in options
        assert options['ignoreerrors'] is True
        assert 'quiet' in options
        assert options['quiet'] is True
        assert 'matchtitle' in options

    def test_get_download_options(self):
        """Test download options generation."""
        from pathlib import Path

        series = Series(id=1, title='Test Series', path='/test')
        episode = Episode(
            id=1, title='Test Episode', season_number=1,
            episode_number=1, series_id=1
        )

        service = YTDLPService('best', Path('/config'), debug=False)
        options = service._get_download_options(series, episode)

        assert 'format' in options
        assert 'outtmpl' in options
        assert 'progress_hooks' in options
        assert '/sonarr_root/test/Season 1/' in options['outtmpl']


class TestUtils:
    """Test utility functions."""

    def test_escape_title_for_search(self):
        """Test title escaping for search."""
        title = "Test's Episode: Part 1!"
        escaped = escape_title_for_search(title)

        # Should be uppercase
        assert 'TEST' in escaped
        # Should have optional punctuation
        assert '([:]?)' in escaped
        assert "([']?)" in escaped
        assert '([!]?)' in escaped

    def test_apply_time_offset(self):
        """Test time offset application."""
        base_date = datetime(2023, 1, 1, 12, 0, 0)
        offset = {'days': 1, 'hours': 2, 'minutes': 30}

        result = apply_time_offset(base_date, offset)

        expected = datetime(2023, 1, 2, 14, 30, 0)
        assert result == expected

    def test_apply_time_offset_empty(self):
        """Test time offset with empty offset."""
        base_date = datetime(2023, 1, 1, 12, 0, 0)
        result = apply_time_offset(base_date, {})

        assert result == base_date

    def test_apply_time_offset_none(self):
        """Test time offset with None."""
        base_date = datetime(2023, 1, 1, 12, 0, 0)
        result = apply_time_offset(base_date, None)

        assert result == base_date


# Integration test example
class TestIntegration:
    """Integration tests."""

    @patch('services.sonarr_client.requests.request')
    @patch('services.ytdlp_service.yt_dlp.YoutubeDL')
    def test_full_download_workflow(self, mock_ytdl, mock_request):
        """Test the complete download workflow."""
        # This would test the full flow from configuration to download
        # Mock all external dependencies and verify the workflow
        pass


if __name__ == '__main__':
    pytest.main([__file__])
